import numpy as np
import matplotlib.pyplot as plt

# Provided parameters in the problem statement
a = 1.0  # Semi-major axis of the ellipse(m)
b = 0.5  # Semi-minor axis of the ellipse(m)
R = 20.0  # Far-field boundary distance/Radius of the circle(m)
N_xi = 101  # Number of grid points in xi-direction
N_eta = 81  # Number of grid points in eta-direction

# Generating the computational grid
xi = np.linspace(0, 1, N_xi)
eta = np.linspace(0, 1, N_eta)
XI, ETA = np.meshgrid(xi, eta)

# Defining  the boundaries and boundary condition
def bottom_boundary(xi):
    """Bottom boundary  is an ellipse"""
    theta = 2 * np.pi * xi
    return a * np.cos(theta), b * np.sin(theta)

def top_boundary(xi):
    """Top boundary is a circle which acts as far-field"""
    theta = 2 * np.pi * xi
    return R * np.cos(theta), R * np.sin(theta)

# Transfinite Interpolation
def transfinite_interpolation(xi, eta):
    """Transfinite interpolation to generate grid points"""
    # Bottom boundary contribution
    F1_x, F1_y = bottom_boundary(xi)
    # Top boundary contribution
    F2_x, F2_y = top_boundary(xi)

    # TFI formula after substituting boundary conditons and simplification
    x = (1 - eta) * F1_x + eta * F2_x
    y = (1 - eta) * F1_y + eta * F2_y

    return x, y

# Generate the physical grid
X, Y = transfinite_interpolation(XI, ETA)

# Plotting the grid
plt.figure(figsize=(10, 8))
plt.plot(X, Y, 'k', linewidth=0.5)
plt.plot(X.T, Y.T, 'k', linewidth=0.5)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Grid Generated by Transfinite Interpolation')
plt.axis('equal')
plt.show()
